// Minimum bracket Reversal
// Send Feedback
// Given a string expression which consists only ‘}’ and ‘{‘. The expression may not be balanced. You need to find the minimum number of bracket reversals which are required to make the expression balanced.
// Return -1 if the given expression can't be balanced.
// Input Format :
// String S
// Output Format :
// Required count
// Sample Input 1 :
// {{{
// Sample Output 1 :
// -1
// Sample Input 2 :
// {{{{}}
// Sample Output 2 :
// 1

import java.util.*;

public class Solution {

	
	// Function returns -1 if brackets can't be balanced
	public static int countBracketReversals(String input){
		
         int len = input.length(); 
      
        // length of expression must be even to make 
        // it balanced by using reversals. 
        if (len%2 != 0) 
        return -1; 
      
        // After this loop, stack contains unbalanced 
        // part of expression, i.e., expression of the 
        // form "}}..}{{..{" 
        Stack<Character> s=new Stack<>(); 
          
        for (int i=0; i<len; i++) 
        { 
            char c = input.charAt(i); 
            if (c =='}' && !s.empty()) 
            { 
                if (s.peek()=='{') 
                    s.pop(); 
                else
                    s.push(c); 
            } 
            else
                s.push(c); 
        } 
      
        // Length of the reduced expression 
        // red_len = (m+n) 
        int red_len = s.size(); 
      
        // count opening brackets at the end of 
        // stack 
        int n = 0; 
        while (!s.empty() && s.peek() == '{') 
        { 
            s.pop(); 
            n++; 
        } 
      
        // return ceil(m/2) + ceil(n/2) which is 
        // actually equal to (m+n)/2 + n%2 when 
        // m+n is even. 
        return (red_len/2 + n%2); 
        
        
// 		int cleft=0,cright=0;
//         int cfinal;
        
//         for(int i=0;i<input.length();i++)
//         {
//             if(input.charAt(i)=='{')
//                 cleft++;
            
            
//             if(input.charAt(i)=='}')
//                 cright++;
//         }
// 		cfinal=cleft-cright;
//        // if(cleft==0 && cright==0)
        
//         if(cfinal%2==0)
//             return Math.abs(cfinal)/2;
//         else
//             return -1;
       
	}
	
	

}
