// Find Path in BST
// Send Feedback
// Given a BST and an integer k. Find and return the path from the node with data k and root
//(if a node with data k is present in given BST). Return null otherwise.
// Assume that BST contains all unique elements.
// Input Format :
// Line 1 : Elements in level order form (separated by space)
// (If any node does not have left or right child, take -1 in its place)
// Line 2 : Integer k
// Output Format :
// Path from node k to root
// Sample Input :
// 8 5 10 2 6 -1 -1 -1 -1 -1 7 -1 -1
// 2
// Sample Output :
// 2
// 5
// 8

import java.util.ArrayList;

public class Solution {

/*	Binary Tree Node class
 * 
 * class BinaryTreeNode<T> {
		T data;
		BinaryTreeNode<T> left;
		BinaryTreeNode<T> right;
		
		public BinaryTreeNode(T data) {
			this.data = data;
		}
	}
	*/

	public static ArrayList<Integer> findPath(BinaryTreeNode<Integer> root, int data){
		/* Your class should be named Solution
		* Don't write main().
		* Don't read input, it is passed as function argument.
		* Return output and don't print it.
		* Taking input and printing output is handled automatically.
		*/

         if(root==null)
         {// {ArrayList<Integer> arr=new ArrayList<Integer>(1);
        // arr.add(data);
         return null;
        }

        if(root.data==data)
        {ArrayList<Integer> arr=new ArrayList<Integer>();
        arr.add(root.data);
         return arr;
        }
        
        ArrayList<Integer> leftOutput=findPath(root.left,data);   
                    
        if(leftOutput!=null) 
        {leftOutput.add(root.data);
         return leftOutput;
        }
        
        ArrayList<Integer> rightOutput=findPath(root.right,data);   
                    
        if(rightOutput!=null) 
        {rightOutput.add(root.data);
         return rightOutput;
        }
        
        else
            return null;
        
        
	}
}
