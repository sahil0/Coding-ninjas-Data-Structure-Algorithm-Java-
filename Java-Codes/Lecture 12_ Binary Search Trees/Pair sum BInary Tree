// Pair sum BInary Tree
// Send Feedback
// Given a binary tree and an integer S, print all the pair of nodes whose sum equals S.
// Assume binary tree contains all unique elements.
// Note : In a pair, print the smaller element first. Order of different pair doesn't matter.
// Input format :
// Line 1 : Elements in level order form (separated by space)
// (If any node does not have left or right child, take -1 in its place)
// Line 2 : Integer S
// Output Format :
// Each pair in different line (pair elements separated by space)
// Constraints :
// 1 <= N <= 1000
// Sample Input 1:
// 5 10 6 2 3 -1 -1 -1 -1 -1 9 -1 -1
// 15
// Sample Output 1:
// 5 10
// 6 9


public class Solution {

/*	Binary Tree Node class
 * 
 * class BinaryTreeNode<T> {
		T data;
		BinaryTreeNode<T> left;
		BinaryTreeNode<T> right;
		
		public BinaryTreeNode(T data) {
			this.data = data;
		}
	}
	*/
     public static BinaryTreeNode<Integer> find(BinaryTreeNode<Integer> root, int f)
    {
        if(root==null)
            return null;
        if(root.data.equals(f))
        {
            return root;
        }
        
        BinaryTreeNode<Integer> l=find(root.left,f);
        if(l!=null)
            return l;
        BinaryTreeNode<Integer> r=find(root.right,f);
        if(r!=null)
            return r;
        return null;    
    }
    
    
    public static void nodesSumToS(BinaryTreeNode<Integer> croot,BinaryTreeNode<Integer> root, int sum) {
	    
	   if(croot==null)
	   {
	        return;
	   }
	   int s = sum-croot.data;
	 
	   BinaryTreeNode<Integer> f=null;
	   if(croot.data<s)
		   f=find(root,s);
	   if(f!=null)
	   {
	       System.out.println(croot.data+" "+f.data);
	   }
	  
	   nodesSumToS(croot.left,root,sum);
	   nodesSumToS(croot.right,root,sum);
	
	}
    

	public static void nodesSumToS(BinaryTreeNode<Integer> root, int sum) {
		// Write your code here
        nodesSumToS(root,root,sum);

	}
}
