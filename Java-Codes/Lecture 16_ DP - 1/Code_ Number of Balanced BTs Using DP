// Code: Number of Balanced BTs Using DP
// Send Feedback
// Given an integer h, find the possible number of balanced binary trees of height h. You just need to return the count of possible binary trees which are balanced.
// This number can be huge, so return output modulus 10^9 + 7.
// Time complexity should be O(h).
// Input Format :
// Integer h
// Output Format :
// Count % 10^9 + 7
// Input Constraints :
// 1 <= h <= 10^7
// Sample Input 1:
// 3
// Sample Output 1:
// 15
// Sample Input 2:
// 4
// Sample Output 2:
// 315


public class Solution {

	public static int balancedTreesOfHeightH(int n){
	   
      int storage[] = new int[n+1];

      storage[0] = 1;
      storage[1] = 1;

      for(int i = 2 ; i <= n ; i++){
          int h1 = storage[i-1];
          int h2 = storage[i-2];

          int m = (int)Math.pow(10,9) + 7;
        long res1 = ((long)h1*h1);
        long res2 = ((long)h1*h2*2);

        int val1 = (int)(res1%m);
        int val2 = (int)(res2%m);

        storage[i] = (val1 + val2)%m;
      }
        return storage[n];
	}
}
