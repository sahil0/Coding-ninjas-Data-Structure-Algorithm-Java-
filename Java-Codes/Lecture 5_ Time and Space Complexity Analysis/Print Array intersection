// Print Array intersection
// Send Feedback
// Given two random integer arrays, print their intersection. That is, print all the elements that are present in both the given arrays.
// Input arrays can contain duplicate elements.
// Note : Order of elements are not important
// Input format :
// Line 1 : Integer N, Array 1 Size
// Line 2 : Array 1 elements (separated by space)
// Line 3 : Integer M, Array 2 Size
// Line 4 : Array 2 elements (separated by space)
// Output format :
// Print intersection elements in different lines
// Constraints :
// 0 <= M, N <= 5 * 10^7
// Sample Input 1 :
// 6
// 2 6 8 5 4 3
// 4
// 2 3 4 7 
// Sample Output 1 :
// 2 
// 4 
// 3
// Sample Input 2 :
// 4
// 2 6 1 2
// 5
// 1 2 3 4 2
// Sample Output 2 :
// 2 
// 2
// 1


import java.util.*;
public class Intersection{
	
    
    public static  void merge(int arr[], int start, int mid, int end) 
    { 
        // Find sizes of two subarrays to be merged 
        int n1 = mid - start + 1; 
        int n2 = end - mid; 
  
        /* Create temp arrays */
        int L[] = new int [n1]; 
        int R[] = new int [n2]; 
  
        /*Copy data to temp arrays*/
        for (int i=0; i<n1; ++i) 
            L[i] = arr[start + i]; 
        for (int j=0; j<n2; ++j) 
            R[j] = arr[mid + 1+ j]; 
  
  
        /* Merge the temp arrays */
  
        // Initial indexes of first and second subarrays 
        int i = 0, j = 0; 
  
        // Initial index of merged subarry array 
        int k = start; 
        while (i < n1 && j < n2) 
        { 
            if (L[i] <= R[j]) 
            { 
                arr[k] = L[i]; 
                i++; 
            } 
            else
            { 
                arr[k] = R[j]; 
                j++; 
            } 
            k++; 
        } 
  
        /* Copy remaining elements of L[] if any */
        while (i < n1) 
        { 
            arr[k] = L[i]; 
            i++; 
            k++; 
        } 
  
        /* Copy remaining elements of R[] if any */
        while (j < n2) 
        { 
            arr[k] = R[j]; 
            j++; 
            k++; 
        } 
    } 
  
    // Main function that sorts arr[l..r] using 
    // merge() 
  public static   void sort(int arr[], int start, int end) 
    { 
        if (start < end) 
        { 
            // Find the middle point 
            int mid = (start+end)/2; 
  
            // Sort first and second halves 
            sort(arr, start, mid); 
            sort(arr , mid+1, end); 
  
            // Merge the sorted halves 
            merge(arr, start, mid, end); 
        } 
    } 
  
    
    
    
    
    
    
	public static void intersection(int[] input1, int[] input2){
		/* Your class should be named Intersection
		 * Don't write main().
		 * Don't read input, it is passed as function argument.
		 * Print output and don't return it.
	 	 * Taking input is handled automatically.
         */
        
        sort(input1,0,input1.length-1);

     sort(input2,0,input2.length-1);
     for(int i=0;i<input1.length;i++)
        {   
         
                  for(int j=0;j<input2.length;j++)
                    {
                     

                      if(input1[i]==input2[j])
                      {System.out.println(input1[i]);
                       input2[j]=Integer.MIN_VALUE;
                       break;
                       
                      }
                      
                    }

        }
        
        
	}
}
