// Even after Odd LinkedList
// Send Feedback
// Arrange elements in a given Linked List such that, all even numbers are placed after odd numbers. Respective order of elements should remain same.
// Note: Input and Output has already managed for you. You don't need to print the elements, instead return the head of updated LL.
// Input format:
// Linked list elements (separated by space and terminated by -1)
// Output format:
// Print the elements of updated Linked list. 
// Sample Input 1 :
// 1 4 5 2 -1
// Sample Output 1 :
// 1 5 4 2 
// Sample Input 2 :
// 1 11 3 6 8 0 9 -1
// Sample Output 2 :
// 1 11 3 9 6 8 0
/*
class LinkedListNode<T> {
	public T data;
	public LinkedListNode<T> next;

	public LinkedListNode(T data) {
		this.setData(data);
		this.next = null;
	}



}
* */
public class Solution {
    
   
    
    
	public static LinkedListNode<Integer> sortEvenOdd(LinkedListNode<Integer> head) {
   LinkedListNode<Integer> odd = null, oddTail = null;
		LinkedListNode<Integer> even = null, evenTail = null;
		LinkedListNode<Integer> curr = head;

	while (curr != null)
		{
			if ((curr.data & 1) == 0) // current node is even
			{
				// handle head for first odd node
				if (odd == null) {
					odd = oddTail = curr;
				}
				else
				{
					oddTail.next = curr;
					oddTail = oddTail.next;
				}
			}
			else // current node is odd
			{
				// handle head for first even node
				if (even == null) {
					even = evenTail = curr;
				}
				else
				{
					evenTail.next = curr;
					evenTail = curr;
				}
			}
			curr = curr.next;
		}

		// if list contains at-least one even node
		if (even != null)
		{
			head = even;
			evenTail.next = odd;
		}
		// special case - list contains all odd nodes
		else {
			head = odd;
		}

		// null to terminate the list, 
		// else it will go in infinite loop
		if (oddTail != null) {
			oddTail.next = null;
		}

		return head;
	}
}



