// Code : Midpoint of Linked list
// Send Feedback
// Given a linked list, find and return the midpoint.
// If the length of linked list is even, return the first mid point.
// Input format : Linked list elements (separated by space and terminated by -1)`

// Sample Input 1 :
// 1 2 3 4 5 -1
// Sample Output 1 :
// 3
// Sample Input 2 :
// 1 2 3 4 -1
// Sample Output 2 :
// 2


/*
class LinkedListNode<T> {
	public T data;
	public LinkedListNode<T> next;

	public LinkedListNode(T data) {
		this.setData(data);
		this.next = null;
	}

	public T getData() {
		return data;
	}

	public void setData(T data) {
		this.data = data;
	}

}
* */
public class Solution {
	public static int printMiddel(LinkedListNode<Integer> head) {
        
        if(head.next==null)
            return head.data;
        
        LinkedListNode<Integer> slow=head;
        
        LinkedListNode<Integer> fast=head;
        
        while(fast.next.next!=null && fast.next!=null)
        {slow=slow.next;
        fast=fast.next.next;
        }
        return slow.data;
        
        
    }
}
