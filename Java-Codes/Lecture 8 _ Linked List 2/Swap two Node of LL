// Swap two Node of LL
// Send Feedback
// Given a linked list, i & j, swap the nodes that are present at i & j position in the LL. You need to swap the entire nodes, not just the data.
// Indexing starts from 0. You don't need to print the elements, just swap and return the head of updated LL.
// Assume i & j given will be within limits. And i can be greater than j also.
// Input format :

// Line 1 : Linked list elements (separated by space and terminated by -1)

// Line 2 : i and j (separated by space)

// Sample Input 1 :
// 3 4 5 2 6 1 9 -1
// 3 4
// Sample Output 1 :
// 3 4 5 6 2 1 9
// Sample Input 2 :
// 3 4 5 2 6 1 9 -1
// 2 4
// Sample Output 2 :
// 3 4 6 2 5 1 9


/*
class LinkedListNode<T> {
	public T data;
	public LinkedListNode<T> next;

	public LinkedListNode(T data) {
		this.setData(data);
		this.next = null;
	}

	public T getData() {
		return data;
	}

	public void setData(T data) {
		this.data = data;
	}

}
* */
public class Solution {
	public static  LinkedListNode<Integer> swap_nodes(LinkedListNode<Integer> head,int i,int j){
		LinkedListNode<Integer> temp1=head;
        LinkedListNode<Integer> node1=head;
        LinkedListNode<Integer> node2=head;
        
        for(int a=0;a<i;a++)
            node1=node1.next;
         for(int b=0;b<j;b++)
    		node2=node2.next;
        int temp=node1.data;
        node1.data=node2.data;
        node2.data=temp;
        return temp1;
        
	}
}
