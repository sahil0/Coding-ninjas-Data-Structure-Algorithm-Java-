// Dequeue
// Send Feedback
// You need to implement a class for Dequeue i.e. for double ended queue. In this queue, elements can be inserted and deleted from both the ends.
// You don't need to double the capacity.
// You need to implement the following functions -
// 1. constructor
// You need to create the appropriate constructor. Size for the queue passed is 10.
// 2. insertFront -
// This function takes an element as input and insert the element at the front of queue. Insert the element only if queue is not full. And if queue is full, print -1 and return.
// 3. insertRear -
// This function takes an element as input and insert the element at the end of queue. Insert the element only if queue is not full. And if queue is full, print -1 and return.
// 4. deleteFront -
// This function removes an element from the front of queue. Print -1 if queue is empty.
// 5. deleteRear -
// This function removes an element from the end of queue. Print -1 if queue is empty.
// 6. getFront -
// Returns the element which is at front of the queue. Return -1 if queue is empty.
// 7. getRear -
// Returns the element which is at end of the queue. Return -1 if queue is empty.

import java.util.ArrayList;
import java.util.List;

/******************
 * Following is the main function we are using internally.
 * Refer this for completing the Dequeue class
 *
 
  public static void main(String[] args) {
		Scanner s = new Scanner(System.in);

		Dequeue dq = new Dequeue(10);

		while(true){
			int choice = s.nextInt(),input;
			switch (choice) {
			case 1:
				input = s.nextInt();
				dq.insertFront(input);
				break;
			case 2:
				input = s.nextInt();
				dq.insertRear(input);
				break;
			case 3:
				dq.deleteFront();
				break;
			case 4:
				dq.deleteRear();
				break;
			case 5:
				System.out.println(dq.getFront());
				break;
			case 6:
				System.out.println(dq.getRear());
				break;
			default:
				return ;
			}  
		}
	} 
 ******************/

public class Dequeue {
    
  private	int[] deq;
   private  int front;
    private int rear;
   private  int si;
    
    
    
     Dequeue(int size){
        deq=new int[size];
        si=size;
        front=-1;
        rear=-1;
    }
    
    public void insertFront(int ele){
        
        if(front==-1 && rear==-1)
        {
            front=0;
            rear=0;
            deq[front]=ele;
            return;
        }
        //cout<<"front="<<front<<" rear="<<rear<<endl;
        if((front+1)%si==rear){
            System.out.println("-1");
            return;
        }
        front=(front+1)%si; 
        deq[front]=ele;
        
    }
    
    public void insertRear(int ele){
        if(front==-1 && rear==-1)
        {
            front=0;
            rear=0;
            deq[rear]=ele;
            return;
        }
        //cout<<"front="<<front<<" rear="<<rear<<endl;
        if(front==rear-1 || rear==0 && front==si-1){
            System.out.println("-1");
            return;
        }
        if(rear==0)
            rear=si-1;
        else
            rear--;
        deq[rear]=ele;
        
    }
    public void deleteFront(){
        if(front==-1 && rear==-1){
            System.out.println("-1");
            return;
        }
        if(rear==front){
            rear=-1;
            front=-1;
            return;
        }
        if(front==0)
            front=si-1;
        else
            front--;
    }
    
    public void deleteRear(){
        if(front==-1 && rear==-1){
           System.out.println("-1");
            return;
        }
        if(rear==front){
            rear=-1;
            front=-1;
            return;
        }
        rear=(rear+1)%si;
    }
    
    public int getFront(){
        if(front==-1 && rear==-1){
            return -1;
        }
        return deq[front];
    }
    public int getRear(){
        if(front==-1 && rear==-1){
            return -1;
        }
        return deq[rear];
    }    
    
    // Complete this class
    
}
