// Code : Max Priority Queue
// Send Feedback
// Implement the class for Max Priority Queue which includes following functions -
// 1. getSize -
// Return the size of priority queue i.e. number of elements present in the priority queue.
// 2. isEmpty -
// Check if priority queue is empty or not. Return true or false accordingly.
// 3. insert -
// Given an element, insert that element in the priority queue at the correct position.
// 4. getMax -
// Return the maximum element present in the priority queue without deleting. Return -Infinity if priority queue is empty.
// 5. removeMax -
// Delete and return the maximum element present in the priority queue. Return -Infinity if priority queue is empty.
// Note : main function is given for your reference which we are using internally to test the class.

import java.util.Scanner;
import java.util.ArrayList;


public class PriorityQueue {
    
	 private ArrayList<Integer> heap;

    public PriorityQueue() {
        heap = new ArrayList<Integer>();
    }

    boolean isEmpty(){
        return heap.size() == 0;
    }

    int getSize(){
        return heap.size();
    }

    int getMax(){
        if(isEmpty())
            return Integer.MIN_VALUE;
        return heap.get(0);
    }

    void insert(int element)
    {
        heap.add(element);
        int childIndex = heap.size() - 1;
        int parentIndex = (childIndex - 1) / 2;
        while(childIndex > 0)
        {
            if(heap.get(childIndex) > heap.get(parentIndex))
            {
                int temp = heap.get(childIndex);
                heap.set(childIndex, heap.get(parentIndex));
                heap.set(parentIndex, temp);
                childIndex = parentIndex;
                parentIndex = (childIndex - 1) / 2;
            }
            else
                return;
        }
    }
    int removeMax()
    {
        if(isEmpty())
            return Integer.MIN_VALUE;

        int remove=heap.get(0);
        heap.set(0,heap.get(heap.size()-1));
        heap.remove(heap.size()-1);

        int parentIndex = 0;
        int leftchildIndex = (2*parentIndex)+1;
        int rightchildIndex = (2*parentIndex)+2;

        while(leftchildIndex<heap.size())
        {
            int p=heap.get(parentIndex);
            int l=heap.get(leftchildIndex);
            if(rightchildIndex>=heap.size())
            {
                if(p<l)
                {
                    heap.set(parentIndex,l);
                    heap.set(leftchildIndex,p);
                    return remove;
                }
                else
                    return remove;
            }
            int r=heap.get(rightchildIndex);
            if(p>l&&p>r)
                return remove;
            else if(p<l&&p<r)
            {
                if(l>=r)
                {
                    heap.set(parentIndex,l);
                    heap.set(leftchildIndex,p);
                    parentIndex =leftchildIndex;
                }
                else
                {
                    heap.set(parentIndex,r);
                    heap.set(rightchildIndex,p);
                    parentIndex =rightchildIndex;
                }
                leftchildIndex = (2*parentIndex)+1;
                rightchildIndex = (2*parentIndex)+2;
            }
            else if(p<l)
            {
                heap.set(parentIndex,l);
                heap.set(leftchildIndex,p);
                parentIndex =leftchildIndex;
                leftchildIndex = (2*parentIndex)+1;
                rightchildIndex = (2*parentIndex)+2;
            }
            else
            {
                heap.set(parentIndex,r);
                heap.set(rightchildIndex,p);
                parentIndex =rightchildIndex;
                leftchildIndex = (2*parentIndex)+1;
                rightchildIndex = (2*parentIndex)+2;
            }
        }
        return remove;
    }
    

    
    
    
}

