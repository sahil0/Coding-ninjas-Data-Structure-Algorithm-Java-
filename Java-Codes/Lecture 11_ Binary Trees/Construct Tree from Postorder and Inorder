// Construct Tree from Postorder and Inorder
// Send Feedback
// Given Postorder and Inorder traversal of a binary tree, create the binary tree associated with the traversals.You just need to construct the tree and return the root.
// Note: Assume binary tree contains only unique elements.
// Input format :

// Line 1 : n (Total number of nodes in binary tree)

// Line 2 : Post order traversal

// Line 3 : Inorder Traversal

// Output Format :

// Elements are printed level wise, each level in new line (separated by space).

// Sample Input :
// 8
// 8 4 5 2 6 7 3 1
// 4 8 2 5 1 6 3 7
// Sample Output :
// 1 
// 2 3 
// 4 5 6 7 
// 8


import java.util.*;
public class Solution {

	/*	Binary Tree Node class
	 * 
	 * class BinaryTreeNode<T> {
		T data;
		BinaryTreeNode<T> left;
		BinaryTreeNode<T> right;

		public BinaryTreeNode(T data) {
			this.data = data;
		}
	}
	 */

	public static BinaryTreeNode<Integer> getTreeFromPostorderAndInorder(int[] postorder,int[] inorder){
        
      if (inorder.length == 0 || postorder.length == 0) return null;
    int ip = inorder.length - 1;
    int pp = postorder.length - 1;
    
    Stack<BinaryTreeNode<Integer>> stack = new Stack<BinaryTreeNode<Integer>>();
    BinaryTreeNode<Integer> prev = null;
    BinaryTreeNode<Integer> root = new BinaryTreeNode<Integer>(postorder[pp]);
    stack.push(root);
    pp--;
    
    while (pp >= 0) {
        while (!stack.isEmpty() && stack.peek().data == inorder[ip]) {
            prev = stack.pop();
            ip--;
        }
        BinaryTreeNode<Integer> newNode = new BinaryTreeNode<Integer>(postorder[pp]);
        if (prev != null) {
            prev.left = newNode;
        } else if (!stack.isEmpty()) {
            BinaryTreeNode<Integer> currTop = stack.peek();
            currTop.right = newNode;
        }
        stack.push(newNode);
        prev = null;
        pp--;
    }
    
    return root;
			
        
        
	}

	

}
