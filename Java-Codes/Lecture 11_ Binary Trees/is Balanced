// is Balanced
// Send Feedback
// Given a binary tree, check if its balanced i.e. depth of left and right subtrees of every node differ by at max 1. Return true if given binary tree is balanced, false otherwise.
// Input format :

// Elements in level order form (separated by space). If any node does not have left or right child, take -1 in its place.

// Sample Input 1 :
// 5 6 10 2 3 -1 -1 -1 -1 -1 9 -1 -1
// Sample Output 1 :
// false
// Sample Input 2 :
// 1 2 3 -1 -1 -1 -1
// Sample Output 2 :
// true


import java.util.*;

public class Solution {

/*	Binary Tree Node class
 * 
 * class BinaryTreeNode<T> {
		T data;
		BinaryTreeNode<T> left;
		BinaryTreeNode<T> right;
		
		public BinaryTreeNode(T data) {
			this.data = data;
		}
	}
	*/
    
   public static  int height(BinaryTreeNode<Integer> root) 
    { 
        /* base case tree is empty */
        if (root == null) 
            return 0; 
  
        /* If tree is not empty then height = 1 + max of left 
         height and right heights */
        return 1 + Math.max(height(root.left), height(root.right)); 
    } 
    
    
	
	public static boolean checkBalanced(BinaryTreeNode<Integer> root){
		
		
         int lh; /* for height of left subtree */
  
        int rh; /* for height of right subtree */
  
        /* If tree is empty then return true */
        if (root == null) 
            return true; 
  
        /* Get the height of left and right sub trees */
        lh = height(root.left); 
        rh = height(root.right); 
  
        if (Math.abs(lh - rh) <= 1
            && checkBalanced(root.left) 
            && checkBalanced(root.right)) 
            return true; 
  
        /* If we reach here then tree is not height-balanced */
        return false; 
        
        
        
		
	}

	
	
}
