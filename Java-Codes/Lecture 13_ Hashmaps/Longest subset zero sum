// Longest subset zero sum
// Send Feedback
// Given an array consisting of positive and negative integers, find the length of the longest subarray whose sum is zero.
// NOTE: You have to return the length of longest subarray .
// Input Format :
// Line 1 : Contains an integer N i.e. size of array

// Line 2 : Contains N elements of the array, separated by spaces
// Output Format
//  Line 1 : Length of longest subarray 
// Constraints:
// 0 <= N <= 10^8
// Sample Input :
// 10 
//  95 -97 -387 -435 -5 -70 897 127 23 284
// Sample Output :
// 5


import java.util.*;

/*
	- You are given an integer array containing positive and negative numbers.
	- Your task is to find out the length of the longest continuous subset of this array whose elements add upto zero.

*/

public class solution 
{
    public static int lengthOfLongestSubsetWithZeroSum(ArrayList<Integer> arr) 
   	{
	HashMap<Integer, Integer> map= new HashMap<>();
		if(arr.size()==1 && arr.get(0)==0) {
			return 1;
		}
		int i=0;
		int max=0;
		int sum=0;
		for(int elem: arr) {
			sum+=elem;
			if(map.containsKey(sum)) {
				int x= Math.abs(map.get(sum)-i);
				if(x>max) {
					max=x;
				}
			}else {
				map.put(sum, i);
			}
			i++;
		}
		return max;
	}
}
