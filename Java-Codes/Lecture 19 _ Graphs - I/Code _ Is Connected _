// Code : Is Connected ?
// Send Feedback
// Given an undirected graph G(V,E), check if the graph G is connected graph or not.
// V is the number of vertices present in graph G and vertices are numbered from 0 to V-1.
// E is the number of edges present in graph G.
// Input Format :
// Line 1: Two Integers V and E (separated by space)
// Next 'E' lines, each have two space-separated integers, 'a' and 'b', denoting that there exists an edge between Vertex 'a' and Vertex 'b'.
// Output Format :
// "true" or "false"
// Constraints :
// 2 <= V <= 1000
// 1 <= E <= 1000
// Sample Input 1:
// 4 4
// 0 1
// 0 3
// 1 2
// 2 3
// Sample Output 1:
// true
// Sample Input 2:
// 4 3
// 0 1
// 1 3 
// 0 3
// Sample Output 2:
// false 
// Sample Output 2 Explanation
// The graph is not connected, even though vertices 0,1 and 3 are connected to each other but there isnâ€™t any path from vertices 0,1,3 to vertex 2. 

import java.util.*;

public class Solution {

	
		public static void help(int edges[][],boolean visited[],int fv){  
        visited[fv]=true;
        int n=edges.length;   
          for(int j=0;j<n;j++){
              if(edges[fv][j]==1&&!visited[j]){
                 help(edges,visited,j); 
              }
          }
    }
    public static void main(String[] args){
		Scanner s = new Scanner(System.in);
		int n = s.nextInt();
        // total number of edges e
		int e = s.nextInt();
        int edges[][]=new int[n][n];
        for(int i=0;i<e;i++){
            int fv=s.nextInt();
            int sv=s.nextInt();
            edges[fv][sv]=1;
            edges[sv][fv]=1;
        }    
        boolean visited[]=new boolean[edges.length];
        help(edges,visited,0);
       //now check if all elements is visited or not
        int length=visited.length;
        int i=0;
        while(i<visited.length){
            if(visited[i]!=true){
                System.out.print("false");
                System.exit(0);
            }
            i++;
        }
          System.out.print("true");
          System.exit(0);
    }
}
